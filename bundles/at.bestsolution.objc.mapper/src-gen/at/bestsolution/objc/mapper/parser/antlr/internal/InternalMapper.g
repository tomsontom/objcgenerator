/*
* generated by Xtext
*/
grammar InternalMapper;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package at.bestsolution.objc.mapper.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.bestsolution.objc.mapper.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.bestsolution.objc.mapper.services.MapperGrammarAccess;

}

@parser::members {

 	private MapperGrammarAccess grammarAccess;
 	
    public InternalMapperParser(TokenStream input, MapperGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "PackageDeclaration";	
   	}
   	
   	@Override
   	protected MapperGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	 iv_rulePackageDeclaration=rulePackageDeclaration 
	 { $current=$iv_rulePackageDeclaration.current; } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_native_0_0=	'native' 
    {
        newLeafNode(lv_native_0_0, grammarAccess.getPackageDeclarationAccess().getNativeNativeKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPackageDeclarationRule());
	        }
       		setWithLastConsumed($current, "native", true, "native");
	    }

)
)?	otherlv_1='framework' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPackageDeclarationAccess().getFrameworkKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getPackageDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPackageDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='mapped-to' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPackageDeclarationAccess().getMappedToKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getJavaPackageQualifiedNameParserRuleCall_4_0()); 
	    }
		lv_javaPackage_4_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		set(
       			$current, 
       			"javaPackage",
        		lv_javaPackage_4_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getImportsImportParserRuleCall_5_0()); 
	    }
		lv_imports_5_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_5_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getTypesTypeParserRuleCall_6_0()); 
	    }
		lv_types_6_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_6_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0_0()); 
	    }
		lv_importedNamespace_1_1=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_1, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameParserRuleCall_1_0_1()); 
	    }
		lv_importedNamespace_1_2=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_2, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getProtocolParserRuleCall_0()); 
    }
    this_Protocol_0=ruleProtocol
    { 
        $current = $this_Protocol_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getClassParserRuleCall_1()); 
    }
    this_Class_1=ruleClass
    { 
        $current = $this_Class_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getEnumParserRuleCall_2()); 
    }
    this_Enum_2=ruleEnum
    { 
        $current = $this_Enum_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getTypeDefParserRuleCall_3()); 
    }
    this_TypeDef_3=ruleTypeDef
    { 
        $current = $this_TypeDef_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTypeRef
entryRuleTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRefRule()); }
	 iv_ruleTypeRef=ruleTypeRef 
	 { $current=$iv_ruleTypeRef.current; } 
	 EOF 
;

// Rule TypeRef
ruleTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='id' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeRefAccess().getIdKeyword_0_0());
    }
(	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeRefAccess().getLessThanSignKeyword_0_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTypeRefAccess().getTypeTypeCrossReference_0_1_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeRefAccess().getGreaterThanSignKeyword_0_1_2());
    }
)?)
    |((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getTypeRefAccess().getTypeTypeCrossReference_1_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='<' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeRefAccess().getLessThanSignKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeRefAccess().getGenericTypeTypeRefParserRuleCall_1_1_1_0()); 
	    }
		lv_genericType_6_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRefRule());
	        }
       		set(
       			$current, 
       			"genericType",
        		lv_genericType_6_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='>' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTypeRefAccess().getGreaterThanSignKeyword_1_1_2());
    }
)?(	otherlv_8='*' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTypeRefAccess().getAsteriskKeyword_1_2());
    }
)?)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeRefAccess().getBuiltinBuiltinTypeParserRuleCall_2_0()); 
	    }
		lv_builtin_9_0=ruleBuiltinType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRefRule());
	        }
       		set(
       			$current, 
       			"builtin",
        		lv_builtin_9_0, 
        		"BuiltinType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProtocol
entryRuleProtocol returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProtocolRule()); }
	 iv_ruleProtocol=ruleProtocol 
	 { $current=$iv_ruleProtocol.current; } 
	 EOF 
;

// Rule Protocol
ruleProtocol returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProtocolAccess().getDocDocuParserRuleCall_0_0()); 
	    }
		lv_doc_0_0=ruleDocu		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProtocolRule());
	        }
       		set(
       			$current, 
       			"doc",
        		lv_doc_0_0, 
        		"Docu");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_1='deprecated' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProtocolAccess().getDeprecatedKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProtocolAccess().getDeprecatedVersionParserRuleCall_1_1_0()); 
	    }
		lv_deprecated_2_0=ruleVersion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProtocolRule());
	        }
       		set(
       			$current, 
       			"deprecated",
        		lv_deprecated_2_0, 
        		"Version");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_3='protocol' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProtocolAccess().getProtocolKeyword_2());
    }
(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getProtocolAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProtocolRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
)	otherlv_5='since' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getProtocolAccess().getSinceKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProtocolAccess().getSinceVersionParserRuleCall_5_0()); 
	    }
		lv_since_6_0=ruleVersion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProtocolRule());
	        }
       		set(
       			$current, 
       			"since",
        		lv_since_6_0, 
        		"Version");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getProtocolAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProtocolAccess().getMessagesMessageParserRuleCall_7_0()); 
	    }
		lv_messages_8_0=ruleMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProtocolRule());
	        }
       		add(
       			$current, 
       			"messages",
        		lv_messages_8_0, 
        		"Message");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getProtocolAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageRule()); }
	 iv_ruleMessage=ruleMessage 
	 { $current=$iv_ruleMessage.current; } 
	 EOF 
;

// Rule Message
ruleMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMessageAccess().getDocDocuParserRuleCall_0_0()); 
	    }
		lv_doc_0_0=ruleDocu		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageRule());
	        }
       		set(
       			$current, 
       			"doc",
        		lv_doc_0_0, 
        		"Docu");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_1='deprecated' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMessageAccess().getDeprecatedKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageAccess().getDeprecatedVersionParserRuleCall_1_1_0()); 
	    }
		lv_deprecated_2_0=ruleVersion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageRule());
	        }
       		set(
       			$current, 
       			"deprecated",
        		lv_deprecated_2_0, 
        		"Version");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_3='-' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMessageAccess().getHyphenMinusKeyword_2_0());
    }

    |	otherlv_4='+' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMessageAccess().getPlusSignKeyword_2_1());
    }
)	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMessageAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageAccess().getReturnValueTypeRefParserRuleCall_4_0()); 
	    }
		lv_returnValue_6_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageRule());
	        }
       		set(
       			$current, 
       			"returnValue",
        		lv_returnValue_6_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMessageAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageAccess().getElementsMessageElementParserRuleCall_6_0()); 
	    }
		lv_elements_8_0=ruleMessageElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_8_0, 
        		"MessageElement");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_9='since' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMessageAccess().getSinceKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageAccess().getSinceVersionParserRuleCall_8_0()); 
	    }
		lv_since_10_0=ruleVersion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageRule());
	        }
       		set(
       			$current, 
       			"since",
        		lv_since_10_0, 
        		"Version");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=';' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMessageAccess().getSemicolonKeyword_9());
    }
)
;





// Entry rule entryRuleMessageElement
entryRuleMessageElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageElementRule()); }
	 iv_ruleMessageElement=ruleMessageElement 
	 { $current=$iv_ruleMessageElement.current; } 
	 EOF 
;

// Rule MessageElement
ruleMessageElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMessageElementAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMessageElementAccess().getColonKeyword_1_0());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMessageElementAccess().getLeftParenthesisKeyword_1_1());
    }
(	otherlv_3='const' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMessageElementAccess().getConstKeyword_1_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageElementAccess().getTypeTypeRefParserRuleCall_1_3_0()); 
	    }
		lv_type_4_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageElementRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMessageElementAccess().getRightParenthesisKeyword_1_4());
    }
(
(
		lv_variable_6_0=RULE_ID
		{
			newLeafNode(lv_variable_6_0, grammarAccess.getMessageElementAccess().getVariableIDTerminalRuleCall_1_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"variable",
        		lv_variable_6_0, 
        		"ID");
	    }

)
))?)
;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getDocDocuParserRuleCall_0_0()); 
	    }
		lv_doc_0_0=ruleDocu		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		set(
       			$current, 
       			"doc",
        		lv_doc_0_0, 
        		"Docu");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_1='deprecated' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClassAccess().getDeprecatedKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getDeprecatedVersionParserRuleCall_1_1_0()); 
	    }
		lv_deprecated_2_0=ruleVersion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		set(
       			$current, 
       			"deprecated",
        		lv_deprecated_2_0, 
        		"Version");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_3='class' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClassAccess().getClassKeyword_2());
    }
(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getClassAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
)	otherlv_5='since' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getClassAccess().getSinceKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getSinceVersionParserRuleCall_5_0()); 
	    }
		lv_since_6_0=ruleVersion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		set(
       			$current, 
       			"since",
        		lv_since_6_0, 
        		"Version");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7='inherits' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getClassAccess().getInheritsKeyword_6_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getParentClassCrossReference_6_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_9='conforms' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getClassAccess().getConformsKeyword_7_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getProtocolsProtocolCrossReference_7_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getClassAccess().getCommaKeyword_7_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getProtocolsProtocolCrossReference_7_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_13='{' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_8());
    }
(	otherlv_14='initializers' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getClassAccess().getInitializersKeyword_9_0());
    }
	otherlv_15='{' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_9_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getInitializerMessagesMessageParserRuleCall_9_2_0()); 
	    }
		lv_initializerMessages_16_0=ruleMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"initializerMessages",
        		lv_initializerMessages_16_0, 
        		"Message");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_17='}' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_9_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getPropertiesPropertyParserRuleCall_10_0()); 
	    }
		lv_properties_18_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_18_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getMessagesMessageParserRuleCall_11_0()); 
	    }
		lv_messages_19_0=ruleMessage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"messages",
        		lv_messages_19_0, 
        		"Message");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_20='}' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_12());
    }
)
;





// Entry rule entryRuleVersion
entryRuleVersion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVersionRule()); }
	 iv_ruleVersion=ruleVersion 
	 { $current=$iv_ruleVersion.current; } 
	 EOF 
;

// Rule Version
ruleVersion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_sinceMajor_0_0=RULE_INT
		{
			newLeafNode(lv_sinceMajor_0_0, grammarAccess.getVersionAccess().getSinceMajorINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVersionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sinceMajor",
        		lv_sinceMajor_0_0, 
        		"INT");
	    }

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVersionAccess().getFullStopKeyword_1());
    }
(
(
		lv_sinceMinor_2_0=RULE_INT
		{
			newLeafNode(lv_sinceMinor_2_0, grammarAccess.getVersionAccess().getSinceMinorINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVersionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sinceMinor",
        		lv_sinceMinor_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getDocDocuParserRuleCall_0_0()); 
	    }
		lv_doc_0_0=ruleDocu		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"doc",
        		lv_doc_0_0, 
        		"Docu");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_1='deprecated' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyAccess().getDeprecatedKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getDeprecatedVersionParserRuleCall_1_1_0()); 
	    }
		lv_deprecated_2_0=ruleVersion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"deprecated",
        		lv_deprecated_2_0, 
        		"Version");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_3='@property' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPropertyAccess().getPropertyKeyword_2());
    }
	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPropertyAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getAttributesPropertyAttributeParserRuleCall_4_0_0()); 
	    }
		lv_attributes_5_0=rulePropertyAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_5_0, 
        		"PropertyAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPropertyAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getAttributesPropertyAttributeParserRuleCall_4_1_1_0()); 
	    }
		lv_attributes_7_0=rulePropertyAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_7_0, 
        		"PropertyAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPropertyAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getTypeTypeRefParserRuleCall_6_0()); 
	    }
		lv_type_9_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_9_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_10_0=RULE_ID
		{
			newLeafNode(lv_name_10_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_10_0, 
        		"ID");
	    }

)
)	otherlv_11='since' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getPropertyAccess().getSinceKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getSinceVersionParserRuleCall_9_0()); 
	    }
		lv_since_12_0=ruleVersion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"since",
        		lv_since_12_0, 
        		"Version");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_13=';' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getPropertyAccess().getSemicolonKeyword_10());
    }
)
;





// Entry rule entryRulePropertyAttribute
entryRulePropertyAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyAttributeRule()); }
	 iv_rulePropertyAttribute=rulePropertyAttribute 
	 { $current=$iv_rulePropertyAttribute.current; } 
	 EOF 
;

// Rule PropertyAttribute
rulePropertyAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPropertyAttributeAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyAttributeAccess().getEqualsSignKeyword_1_0());
    }
(
(
		lv_value_2_0=RULE_ID
		{
			newLeafNode(lv_value_2_0, grammarAccess.getPropertyAttributeAccess().getValueIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ID");
	    }

)
))?)
;





// Entry rule entryRuleEnum
entryRuleEnum returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumRule()); }
	 iv_ruleEnum=ruleEnum 
	 { $current=$iv_ruleEnum.current; } 
	 EOF 
;

// Rule Enum
ruleEnum returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumAccess().getEnumKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEnumAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumAccess().getElementsEnumElementParserRuleCall_3_0()); 
	    }
		lv_elements_3_0=ruleEnumElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"EnumElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumAccess().getElementsEnumElementParserRuleCall_4_1_0()); 
	    }
		lv_elements_5_0=ruleEnumElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_5_0, 
        		"EnumElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleEnumElement
entryRuleEnumElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumElementRule()); }
	 iv_ruleEnumElement=ruleEnumElement 
	 { $current=$iv_ruleEnumElement.current; } 
	 EOF 
;

// Rule EnumElement
ruleEnumElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getEnumElementAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumElementAccess().getEqualsSignKeyword_1_0());
    }
(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getEnumElementAccess().getValueINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
))?)
;





// Entry rule entryRuleTypeDef
entryRuleTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefRule()); }
	 iv_ruleTypeDef=ruleTypeDef 
	 { $current=$iv_ruleTypeDef.current; } 
	 EOF 
;

// Rule TypeDef
ruleTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getDocDocuParserRuleCall_0_0()); 
	    }
		lv_doc_0_0=ruleDocu		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		set(
       			$current, 
       			"doc",
        		lv_doc_0_0, 
        		"Docu");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='typedef' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeDefAccess().getTypedefKeyword_1());
    }
(((
(
		lv_struct_2_0=	'struct' 
    {
        newLeafNode(lv_struct_2_0, grammarAccess.getTypeDefAccess().getStructStructKeyword_2_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefRule());
	        }
       		setWithLastConsumed($current, "struct", true, "struct");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeDefAccess().getLeftCurlyBracketKeyword_2_0_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getAttributesTypeStructAttributeParserRuleCall_2_0_2_0_0()); 
	    }
		lv_attributes_4_0=ruleTypeStructAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_4_0, 
        		"TypeStructAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTypeDefAccess().getSemicolonKeyword_2_0_2_1());
    }
)+	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTypeDefAccess().getRightCurlyBracketKeyword_2_0_3());
    }
)
    |((
(
		lv_block_7_0=	'void' 
    {
        newLeafNode(lv_block_7_0, grammarAccess.getTypeDefAccess().getBlockVoidKeyword_2_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefRule());
	        }
       		setWithLastConsumed($current, "block", true, "void");
	    }

)
)	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTypeDefAccess().getLeftParenthesisKeyword_2_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getAttributesTypeStructAttributeParserRuleCall_2_1_2_0()); 
	    }
		lv_attributes_9_0=ruleTypeStructAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_9_0, 
        		"TypeStructAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getTypeDefAccess().getCommaKeyword_2_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getAttributesTypeStructAttributeParserRuleCall_2_1_3_1_0()); 
	    }
		lv_attributes_11_0=ruleTypeStructAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_11_0, 
        		"TypeStructAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getTypeDefAccess().getRightParenthesisKeyword_2_1_4());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDefAccess().getTypeRefTypeRefParserRuleCall_2_2_0()); 
	    }
		lv_typeRef_13_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDefRule());
	        }
       		set(
       			$current, 
       			"typeRef",
        		lv_typeRef_13_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		lv_name_14_0=RULE_ID
		{
			newLeafNode(lv_name_14_0, grammarAccess.getTypeDefAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_14_0, 
        		"ID");
	    }

)
)	otherlv_15=';' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getTypeDefAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleTypeStructAttribute
entryRuleTypeStructAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeStructAttributeRule()); }
	 iv_ruleTypeStructAttribute=ruleTypeStructAttribute 
	 { $current=$iv_ruleTypeStructAttribute.current; } 
	 EOF 
;

// Rule TypeStructAttribute
ruleTypeStructAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeStructAttributeAccess().getTypeRefTypeRefParserRuleCall_0_0()); 
	    }
		lv_typeRef_0_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeStructAttributeRule());
	        }
       		set(
       			$current, 
       			"typeRef",
        		lv_typeRef_0_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeStructAttributeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeStructAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleBuiltinType
entryRuleBuiltinType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltinTypeRule()); } 
	 iv_ruleBuiltinType=ruleBuiltinType 
	 { $current=$iv_ruleBuiltinType.current.getText(); }  
	 EOF 
;

// Rule BuiltinType
ruleBuiltinType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltinTypeAccess().getVoidKeyword_0()); 
    }

    |
	kw='BOOL' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltinTypeAccess().getBOOLKeyword_1()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltinTypeAccess().getDoubleKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
    }
    this_ValidID_2=ruleValidID    {
		$current.merge(this_ValidID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1()); 
    }

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidIDRule()); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleDocu
entryRuleDocu returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDocuRule()); }
	 iv_ruleDocu=ruleDocu 
	 { $current=$iv_ruleDocu.current; } 
	 EOF 
;

// Rule Docu
ruleDocu returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_content_0_0=RULE_JDOC
		{
			newLeafNode(lv_content_0_0, grammarAccess.getDocuAccess().getContentJDOCTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDocuRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"content",
        		lv_content_0_0, 
        		"JDOC");
	    }

)
)
;





RULE_JDOC : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


