/*
* generated by Xtext
*/
package at.bestsolution.objc.mapper.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import at.bestsolution.objc.mapper.services.MapperGrammarAccess;

public class MapperParser extends AbstractContentAssistParser {
	
	@Inject
	private MapperGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected at.bestsolution.objc.mapper.ui.contentassist.antlr.internal.InternalMapperParser createParser() {
		at.bestsolution.objc.mapper.ui.contentassist.antlr.internal.InternalMapperParser result = new at.bestsolution.objc.mapper.ui.contentassist.antlr.internal.InternalMapperParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getImportAccess().getImportedNamespaceAlternatives_1_0(), "rule__Import__ImportedNamespaceAlternatives_1_0");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getTypeRefAccess().getAlternatives(), "rule__TypeRef__Alternatives");
					put(grammarAccess.getMessageAccess().getAlternatives_2(), "rule__Message__Alternatives_2");
					put(grammarAccess.getTypeDefAccess().getAlternatives_2(), "rule__TypeDef__Alternatives_2");
					put(grammarAccess.getBuiltinTypeAccess().getAlternatives(), "rule__BuiltinType__Alternatives");
					put(grammarAccess.getPackageDeclarationAccess().getGroup(), "rule__PackageDeclaration__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getTypeRefAccess().getGroup_0(), "rule__TypeRef__Group_0__0");
					put(grammarAccess.getTypeRefAccess().getGroup_0_1(), "rule__TypeRef__Group_0_1__0");
					put(grammarAccess.getTypeRefAccess().getGroup_1(), "rule__TypeRef__Group_1__0");
					put(grammarAccess.getTypeRefAccess().getGroup_1_1(), "rule__TypeRef__Group_1_1__0");
					put(grammarAccess.getProtocolAccess().getGroup(), "rule__Protocol__Group__0");
					put(grammarAccess.getProtocolAccess().getGroup_1(), "rule__Protocol__Group_1__0");
					put(grammarAccess.getMessageAccess().getGroup(), "rule__Message__Group__0");
					put(grammarAccess.getMessageAccess().getGroup_1(), "rule__Message__Group_1__0");
					put(grammarAccess.getMessageElementAccess().getGroup(), "rule__MessageElement__Group__0");
					put(grammarAccess.getMessageElementAccess().getGroup_1(), "rule__MessageElement__Group_1__0");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getClassAccess().getGroup_1(), "rule__Class__Group_1__0");
					put(grammarAccess.getClassAccess().getGroup_6(), "rule__Class__Group_6__0");
					put(grammarAccess.getClassAccess().getGroup_7(), "rule__Class__Group_7__0");
					put(grammarAccess.getClassAccess().getGroup_7_2(), "rule__Class__Group_7_2__0");
					put(grammarAccess.getClassAccess().getGroup_9(), "rule__Class__Group_9__0");
					put(grammarAccess.getVersionAccess().getGroup(), "rule__Version__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup_1(), "rule__Property__Group_1__0");
					put(grammarAccess.getPropertyAccess().getGroup_4(), "rule__Property__Group_4__0");
					put(grammarAccess.getPropertyAccess().getGroup_4_1(), "rule__Property__Group_4_1__0");
					put(grammarAccess.getPropertyAttributeAccess().getGroup(), "rule__PropertyAttribute__Group__0");
					put(grammarAccess.getPropertyAttributeAccess().getGroup_1(), "rule__PropertyAttribute__Group_1__0");
					put(grammarAccess.getEnumAccess().getGroup(), "rule__Enum__Group__0");
					put(grammarAccess.getEnumAccess().getGroup_4(), "rule__Enum__Group_4__0");
					put(grammarAccess.getEnumElementAccess().getGroup(), "rule__EnumElement__Group__0");
					put(grammarAccess.getEnumElementAccess().getGroup_1(), "rule__EnumElement__Group_1__0");
					put(grammarAccess.getTypeDefAccess().getGroup(), "rule__TypeDef__Group__0");
					put(grammarAccess.getTypeDefAccess().getGroup_2_0(), "rule__TypeDef__Group_2_0__0");
					put(grammarAccess.getTypeDefAccess().getGroup_2_0_2(), "rule__TypeDef__Group_2_0_2__0");
					put(grammarAccess.getTypeDefAccess().getGroup_2_1(), "rule__TypeDef__Group_2_1__0");
					put(grammarAccess.getTypeDefAccess().getGroup_2_1_3(), "rule__TypeDef__Group_2_1_3__0");
					put(grammarAccess.getTypeStructAttributeAccess().getGroup(), "rule__TypeStructAttribute__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getPackageDeclarationAccess().getNativeAssignment_0(), "rule__PackageDeclaration__NativeAssignment_0");
					put(grammarAccess.getPackageDeclarationAccess().getNameAssignment_2(), "rule__PackageDeclaration__NameAssignment_2");
					put(grammarAccess.getPackageDeclarationAccess().getJavaPackageAssignment_4(), "rule__PackageDeclaration__JavaPackageAssignment_4");
					put(grammarAccess.getPackageDeclarationAccess().getImportsAssignment_5(), "rule__PackageDeclaration__ImportsAssignment_5");
					put(grammarAccess.getPackageDeclarationAccess().getTypesAssignment_6(), "rule__PackageDeclaration__TypesAssignment_6");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getTypeRefAccess().getTypeAssignment_0_1_1(), "rule__TypeRef__TypeAssignment_0_1_1");
					put(grammarAccess.getTypeRefAccess().getTypeAssignment_1_0(), "rule__TypeRef__TypeAssignment_1_0");
					put(grammarAccess.getTypeRefAccess().getGenericTypeAssignment_1_1_1(), "rule__TypeRef__GenericTypeAssignment_1_1_1");
					put(grammarAccess.getTypeRefAccess().getBuiltinAssignment_2(), "rule__TypeRef__BuiltinAssignment_2");
					put(grammarAccess.getProtocolAccess().getDocAssignment_0(), "rule__Protocol__DocAssignment_0");
					put(grammarAccess.getProtocolAccess().getDeprecatedAssignment_1_1(), "rule__Protocol__DeprecatedAssignment_1_1");
					put(grammarAccess.getProtocolAccess().getNameAssignment_3(), "rule__Protocol__NameAssignment_3");
					put(grammarAccess.getProtocolAccess().getSinceAssignment_5(), "rule__Protocol__SinceAssignment_5");
					put(grammarAccess.getProtocolAccess().getMessagesAssignment_7(), "rule__Protocol__MessagesAssignment_7");
					put(grammarAccess.getMessageAccess().getDocAssignment_0(), "rule__Message__DocAssignment_0");
					put(grammarAccess.getMessageAccess().getDeprecatedAssignment_1_1(), "rule__Message__DeprecatedAssignment_1_1");
					put(grammarAccess.getMessageAccess().getReturnValueAssignment_4(), "rule__Message__ReturnValueAssignment_4");
					put(grammarAccess.getMessageAccess().getElementsAssignment_6(), "rule__Message__ElementsAssignment_6");
					put(grammarAccess.getMessageAccess().getSinceAssignment_8(), "rule__Message__SinceAssignment_8");
					put(grammarAccess.getMessageElementAccess().getNameAssignment_0(), "rule__MessageElement__NameAssignment_0");
					put(grammarAccess.getMessageElementAccess().getTypeAssignment_1_3(), "rule__MessageElement__TypeAssignment_1_3");
					put(grammarAccess.getMessageElementAccess().getVariableAssignment_1_5(), "rule__MessageElement__VariableAssignment_1_5");
					put(grammarAccess.getClassAccess().getDocAssignment_0(), "rule__Class__DocAssignment_0");
					put(grammarAccess.getClassAccess().getDeprecatedAssignment_1_1(), "rule__Class__DeprecatedAssignment_1_1");
					put(grammarAccess.getClassAccess().getNameAssignment_3(), "rule__Class__NameAssignment_3");
					put(grammarAccess.getClassAccess().getSinceAssignment_5(), "rule__Class__SinceAssignment_5");
					put(grammarAccess.getClassAccess().getParentAssignment_6_1(), "rule__Class__ParentAssignment_6_1");
					put(grammarAccess.getClassAccess().getProtocolsAssignment_7_1(), "rule__Class__ProtocolsAssignment_7_1");
					put(grammarAccess.getClassAccess().getProtocolsAssignment_7_2_1(), "rule__Class__ProtocolsAssignment_7_2_1");
					put(grammarAccess.getClassAccess().getInitializerMessagesAssignment_9_2(), "rule__Class__InitializerMessagesAssignment_9_2");
					put(grammarAccess.getClassAccess().getPropertiesAssignment_10(), "rule__Class__PropertiesAssignment_10");
					put(grammarAccess.getClassAccess().getMessagesAssignment_11(), "rule__Class__MessagesAssignment_11");
					put(grammarAccess.getVersionAccess().getSinceMajorAssignment_0(), "rule__Version__SinceMajorAssignment_0");
					put(grammarAccess.getVersionAccess().getSinceMinorAssignment_2(), "rule__Version__SinceMinorAssignment_2");
					put(grammarAccess.getPropertyAccess().getDocAssignment_0(), "rule__Property__DocAssignment_0");
					put(grammarAccess.getPropertyAccess().getDeprecatedAssignment_1_1(), "rule__Property__DeprecatedAssignment_1_1");
					put(grammarAccess.getPropertyAccess().getAttributesAssignment_4_0(), "rule__Property__AttributesAssignment_4_0");
					put(grammarAccess.getPropertyAccess().getAttributesAssignment_4_1_1(), "rule__Property__AttributesAssignment_4_1_1");
					put(grammarAccess.getPropertyAccess().getTypeAssignment_6(), "rule__Property__TypeAssignment_6");
					put(grammarAccess.getPropertyAccess().getNameAssignment_7(), "rule__Property__NameAssignment_7");
					put(grammarAccess.getPropertyAccess().getSinceAssignment_9(), "rule__Property__SinceAssignment_9");
					put(grammarAccess.getPropertyAttributeAccess().getNameAssignment_0(), "rule__PropertyAttribute__NameAssignment_0");
					put(grammarAccess.getPropertyAttributeAccess().getValueAssignment_1_1(), "rule__PropertyAttribute__ValueAssignment_1_1");
					put(grammarAccess.getEnumAccess().getNameAssignment_1(), "rule__Enum__NameAssignment_1");
					put(grammarAccess.getEnumAccess().getElementsAssignment_3(), "rule__Enum__ElementsAssignment_3");
					put(grammarAccess.getEnumAccess().getElementsAssignment_4_1(), "rule__Enum__ElementsAssignment_4_1");
					put(grammarAccess.getEnumElementAccess().getNameAssignment_0(), "rule__EnumElement__NameAssignment_0");
					put(grammarAccess.getEnumElementAccess().getValueAssignment_1_1(), "rule__EnumElement__ValueAssignment_1_1");
					put(grammarAccess.getTypeDefAccess().getDocAssignment_0(), "rule__TypeDef__DocAssignment_0");
					put(grammarAccess.getTypeDefAccess().getStructAssignment_2_0_0(), "rule__TypeDef__StructAssignment_2_0_0");
					put(grammarAccess.getTypeDefAccess().getAttributesAssignment_2_0_2_0(), "rule__TypeDef__AttributesAssignment_2_0_2_0");
					put(grammarAccess.getTypeDefAccess().getBlockAssignment_2_1_0(), "rule__TypeDef__BlockAssignment_2_1_0");
					put(grammarAccess.getTypeDefAccess().getAttributesAssignment_2_1_2(), "rule__TypeDef__AttributesAssignment_2_1_2");
					put(grammarAccess.getTypeDefAccess().getAttributesAssignment_2_1_3_1(), "rule__TypeDef__AttributesAssignment_2_1_3_1");
					put(grammarAccess.getTypeDefAccess().getTypeRefAssignment_2_2(), "rule__TypeDef__TypeRefAssignment_2_2");
					put(grammarAccess.getTypeDefAccess().getNameAssignment_3(), "rule__TypeDef__NameAssignment_3");
					put(grammarAccess.getTypeStructAttributeAccess().getTypeRefAssignment_0(), "rule__TypeStructAttribute__TypeRefAssignment_0");
					put(grammarAccess.getTypeStructAttributeAccess().getNameAssignment_1(), "rule__TypeStructAttribute__NameAssignment_1");
					put(grammarAccess.getDocuAccess().getContentAssignment(), "rule__Docu__ContentAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			at.bestsolution.objc.mapper.ui.contentassist.antlr.internal.InternalMapperParser typedParser = (at.bestsolution.objc.mapper.ui.contentassist.antlr.internal.InternalMapperParser) parser;
			typedParser.entryRulePackageDeclaration();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MapperGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MapperGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
